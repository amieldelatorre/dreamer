services:
  unleash_postgres:
    image: postgres
    container_name: unleash_postgres
    hostname: unleash_postgres
    restart: unless-stopped
    networks:
      - dreamer
    ports:
      - 5433:5432
    volumes:
      - ./container_data/unleash_postgres:/var/lib/postgresql/data
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      POSTGRES_DB: ${UNLEASH_POSTGRES_DATABASE:-unleash}
      POSTGRES_USER: ${UNLEASH_POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${UNLEASH_POSTGRES_PASSWORD:-root}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=${UNLEASH_POSTGRES_USER:-root}",
          "--host=127.0.0.1",
          "--port=5432",
          "-d ${UNLEASH_POSTGRES_DATABASE:-unleash}"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
    profiles:
      - all
      - dependency

  unleash_web:
    image: unleashorg/unleash-server:latest
    container_name: unleash_web
    hostname: unleash_web
    restart: unless-stopped
    networks:
      - dreamer
    ports:
      - "4242:4242"
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgres://${UNLEASH_POSTGRES_USER:-root}:${UNLEASH_POSTGRES_PASSWORD:-root}@unleash_postgres/${UNLEASH_POSTGRES_DATABASE:-unleash}"
      # Disable SSL for database connections.
      DATABASE_SSL: "false"
      # Changing log levels:
      LOG_LEVEL: "info"
    depends_on:
      unleash_postgres:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
    profiles:
      - all
      - dependency


  dreamer_postgres:
    image: postgres
    container_name: dreamer_postgres
    hostname: dreamer_postgres
    restart: unless-stopped
    networks:
      - dreamer
    ports:
      - 5432:5432
    volumes:
      - ./container_data/dreamer_postgres:/var/lib/postgresql/data
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      POSTGRES_DB: ${DREAMER_POSTGRES_DATABASE:-dreamer}
      POSTGRES_USER: ${DREAMER_POSTGRES_USERNAME:-root}
      POSTGRES_PASSWORD: ${DREAMER_POSTGRES_PASSWORD:-root}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=${DREAMER_POSTGRES_USERNAME:-root}",
          "--host=127.0.0.1",
          "--port=5432",
          "-database ${DREAMER_POSTGRES_DATABASE:-dreamer}"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
    profiles:
      - all
      - dependency

  dreamer_redis:
    image: redis:7.2.4
    container_name: dreamer_redis
    hostname: dreamer_redis
    restart: unless-stopped
    command: ["redis-server"] # ["redis-server", "/etc/redis/redis.conf"]
    networks:
      - dreamer
    ports:
      - 6379:6379
    # volumes:
      # - ./container_data/dreamer_redis:/data/
      # - ./container_conf/redis.conf:/etc/redis/redis.conf
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      REDIS_HOST: ${DREAMER_REDIS_HOST:-dreamer_redis}
      REDIS_PORT: ${DREAMER_REDIS_PORT:-6379}
      # REDIS_USERNAME: ${DREAMER_REDIS_USER:-root}
      # REDIS_PASSWORD: ${DREAMER_REDIS_PASSWORD:-root}
      # REDIS_PORT: 6379
      # REDIS_DATABASES: 16
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      # test: ["CMD-SHELL", "redis-cli -a ${DREAMER_REDIS_PASSWORD:-password} ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    profiles:
      - all
      - dependency

  dreamer_api:
    # image: amieldelatorre/dreamer-api
    build:
      context: backend
      dockerfile: Dreamer.Api/Dockerfile
    pull_policy: build
    container_name: dreamer_api
    hostname: dreamer_api
    networks:
      - dreamer
    ports:
      - 8080:8080
    environment:
      TZ: ${TIMEZONE:-Pacific/Auckland}
      DREAMER_DATABASE_MIGRATE: ${DREAMER_DATABASE_MIGRATE:-true}
      DREAMER_POSTGRES_HOST: dreamer_postgres
      DREAMER_POSTGRES_PORT: 5432
      DREAMER_POSTGRES_USERNAME: ${DREAMER_POSTGRES_USERNAME:-root}
      DREAMER_POSTGRES_PASSWORD: ${DREAMER_POSTGRES_PASSWORD:-root}
      DREAMER_POSTGRES_DATABASE: ${DREAMER_POSTGRES_DATABASE:-dreamer}
      DREAMER_REDIS_CONNECTION_STRING: "${DREAMER_REDIS_HOST:-dreamer_redis}:${DREAMER_REDIS_PORT:-6379}"
      UNLEASH_API_URL: http://unleash_web:4242/api
      UNLEASH_API_KEY: ${UNLEASH_API_KEY:-*:production.dc7968908207aee9c8bbb6866956060be73c7de60bdfc6e5f69b983c}
      UNLEASH_APP_NAME: ${UNLEASH_APP_NAME:-dreamer}
      LOG_LEVEL: Debug
    develop:
      watch:
        - path: ./backend
          action: rebuild
    depends_on:
      dreamer_postgres:
        condition: service_healthy
      dreamer_redis:
        condition: service_healthy
      unleash_web:
        condition: service_healthy
    profiles:
      - all
      - application

  dreamer_web:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
    pull_policy: build
    container_name: dreamer_web
    hostname: dreamer_web
    networks:
      - dreamer
    ports:
      - 8079:80
    # depends_on:
    #   dreamer_postgres:
    #     condition: service_healthy
    #   dreamer_redis:
    #     condition: service_healthy
    #   unleash_web:
    #     condition: service_healthy
    #   dreamer_api:
    profiles:
      - all
      - application

    

networks:
  dreamer:
    external: true